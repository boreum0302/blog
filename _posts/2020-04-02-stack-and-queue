---
title: "스택(LIFO)과 큐(FIFO), 그리고 데크"
categories:
  - Data Structure
tags:
  - Python
---

단순연결리스트를 이용하면, 맨 앞에서만 항목을 삭제하거나 삽입하는 자료구조인 스택(Stack)과 맨 앞에서는 항목을 삭제하기만 하고 맨 뒤에서는 항목을 삽입하기만 하는 자료구조인 큐(Queue)를 구현할 수 있다. 스택에서는 마지막에 들어온 항목이 가장 먼저 나가므로 후입선출(Last In First Out, LIFO), 큐에서는 먼저 들어온 항목일수록 먼저 나가므로 선입선출(First In First Out, FIFO)이다. 데크는 맨 뒤와 맨 앞에서 삭제와 삽입이 가능한 자료구조이다. 파이썬에는 스택과 큐 객체를 생성할 수 있는 `queue` 라이브러리와 데크 객체를 생성할 수 있는 `deque` 라이브러리가 존재한다!

{% include toc %}

## 스택

먼저 단순연결리스트로 스택을 구현하자. `pop()`은 맨 앞의 노드를 삭제한 뒤 삭제된 노드의 항목을 반환하는 메소드이고, `push()`는 새 노드를 맨 앞에 삽입하는 메소드이다.

```python
class Stack():
    
    class EmptyError(Exception):
        pass

    class Node:
        def __init__(self, item, link):
            self.item = item
            self.next = link

    def __init__(self):
        self.head = None
        self.size = 0

    def size(self): return self.size
    def is_empty(self): return self.size == 0
    
    def push(self, item):  # 맨 앞에 노드 삽입하기
        if self.is_empty():
            self.head = self.Node(item, None)
        else:
            self.head = self.Node(item, self.head)
        self.size += 1
    
    def pop(self):  # 맨 앞의 노드 삭제하고 항목 반환하기
        if self.is_empty():
            raise EmptyError('Underflow')
        else:
            temp = self.head.item
            self.head = self.head.next
            self.size -= 1
            return temp
    
    def print_stack(self):  # 전체 항목 출력하기
        print('top -> ', end='')
        p = self.head
        while p:
            if p.next != None:
                print(p.item, '-> ', end='')
            else:
                print(p.item)
            p = p.next
```

## 큐

## 파이썬 라이브러리 `queue`

## 데크

## 파이썬 라이브러리 `deque`
